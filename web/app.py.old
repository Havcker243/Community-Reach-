from flask import Flask, request, render_template
from flask_sqlalchemy import SQLAlchemy
import mysql.connector
import jsonify

app = Flask(__name__)

# AWS RDS MySQL configurations
db_config = {
    'user': 'admin',
    'password': 'qdpvyQzjF84RU0bx74bf',
    'host': 'communityreach.cjhjdylaa27o.us-west-2.rds.amazonaws.com',
    'database': 'communityreach'
}

app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://admin:xqdpvyQzjF84RU0bx74bf@communityreach.cjhjdylaa27o.us-west-2.rds.amazonaws.com:3306/communityreach'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Function to connect to the database
def connect_to_db():
    try:
        conn = mysql.connector.connect(**db_config)
        return conn
    except mysql.connector.Error as e:
        print(e)
        return None

db = SQLAlchemy(app)

class Event(db.Model):
    __tablename__ = 'Events'
    id = db.Column(db.Integer, primary_key=True)
    EventDate = db.Column(db.Date)  # Assuming EventDate is a Date field in the events table
    # Other columns...

class Location(db.Model):
    __tablename__ = 'Locations'
    id = db.Column(db.Integer, primary_key=True)
    City = db.Column(db.String)  # Assuming City is a String field in the location table
    Address = db.Column(db.String)  # Assuming Address is a String field in the location table
    # Other columns...


@app.route('/get_dates', methods=['GET'])
def get_dates():
    # Query EventDate from the events table
    event_dates = Event.query.with_entities(Event.EventDate).all()
    # Extract the dates from the result
    dates = [date[0].strftime('%Y-%m-%d') for date in event_dates]
    return jsonify(dates)

@app.route('/get_cities', methods=['GET'])
def get_cities():
    # Query City from the location table
    cities = Location.query.with_entities(Location.City).all()
    cities = [city[0] for city in cities]
    return jsonify(cities)

@app.route('/get_addresses', methods=['GET'])
def get_addresses():
    # Query Address from the location table
    addresses = Location.query.with_entities(Location.Address).all()
    addresses = [address[0] for address in addresses]
    return jsonify(addresses)


@app.route('/')
def index():
    return render_template('index.html')

@app.route('/categories')
def categories():
    return render_template('categories.html')

@app.route('/events')
def events():
    return render_template('events.html')

@app.route('/form')
def form():
    return render_template('form.html')

@app.route('/location')
def location():
    return render_template('location-page.html')


@app.route('/submit_form', methods=['POST'])
def submit_form():
    if request.method == 'POST':
        conn = connect_to_db()
        if conn:
            cursor = conn.cursor()
            # Fetch form data
            event_name = request.form['eventname']
            event_description = request.form['eventdescription']
            # Fetch other form fields similarly
            
            # SQL query to insert data into a table
            insert_query = "INSERT INTO your_table_name (event_name, event_description) VALUES (%s, %s)"
            # Values to be inserted into the table
            insert_values = (event_name, event_description)
            # Execute the query
            cursor.execute(insert_query, insert_values)
            
            # Commit changes to the database
            conn.commit()
            
            # Close database connection
            cursor.close()
            conn.close()
            return 'Form submitted successfully!'
        else:
            return 'Failed to connect to the database'
        
    

if __name__ == '__main__':
    app.run(debug=True)